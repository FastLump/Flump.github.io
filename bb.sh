#!/bin/bash

################################################################################
### Declarations

# Program information, primarily for usage()
program_name="Brian's BashBlog"
program_version="1.0"
program_description="A minimalist, Pandoc- and Bash-powered blogging program."

# Blog information
blog_title="Brian Buccola"                  # title of the blog, shown on every page
blog_subtitle="logic, language, linux"      # subtitle of the blog, shown on every page

blog_index_title="Blog Posts"                           # title of the main index page
template_return_to_index="Return to $blog_index_title"  # text for returning to index, or leave empty

blog_license='<a rel="license"
href="http://creativecommons.org/licenses/by/3.0/">
<img alt="Creative Commons License" style="border-width:0"
src="http://i.creativecommons.org/l/by/3.0/80x15.png" /></a>'

blog_author="Brian Buccola"     # used in html head
blog_description=""             # used in html head
blog_keywords=""                # used in html head
blog_email=""

# Date format to be displayed in html files.
date_format="%B %d, %Y"

# Google Analytics ID
google_analytics="UA-38439922-1"

# Blog file and directory structure, all relative to $blog_root_dir
blog_root_dir="$HOME/blog"  # where blog program and files live
index_file="index.html"     # main index file listing all posts
mkd_dir="source"            # directory for markdown posts
html_dir="public"           # directory for html posts
draft_dir="drafts"          # directory for draft posts

# Include files
style="style.css"
head="head.html"
before_body="before-body.html"
after_body="after-body.html"
about="about.html"

# Color handling for program
red=$(tput setaf 1)         # red
green=$(tput setaf 2)       # green
yellow=$(tput setaf 3)      # yellow
blue=$(tput setaf 4)        # blue
magenta=$(tput setaf 5)     # magenta
cyan=$(tput setaf 6)        # cyan
white=$(tput setaf 7)       # white/gray
black=$(tput setaf 8)       # black
bold=$(tput bold)           # bold
reset=$(tput sgr0)          # reset colors

################################################################################
### Functions

# Convert a string to use as filename of a post.
# Usage: convert_string [STRING]
convert_string() {
    echo $1 | tr [:upper:] [:lower:] | sed 's/\ /-/g' | tr -dc '[:alnum:]-'
}

# Ask for confirmation; return 0 if y(es), else 1.
# Usage confirm [MESSAGE]
confirm() {
    local -l reply # convert to lowercase
    local msg="$1"
    read -p "${bold}${msg} [Y/n] ${reset}" reply
    [[ -z "$reply" || "$reply" = y?(es) ]]
}

create_before_body() {
    echo "<!-- Warning: Do not edit this file; it will be overwritten during blog rebuild. -->" > $before_body
    echo '<h1 class="blog_title">'$blog_title'</h1>' >> $before_body
    if [[ -n "$blog_subtitle" ]]; then
        echo '<h4 class="blog_subtitle">'$blog_subtitle'</h4>' >> $before_body
    fi
    echo "" >> $before_body
}

create_after_body() {
    echo "<!-- Warning: Do not edit this file; it will be overwritten during blog rebuild. -->" > $after_body
    echo '<hr />' >> $after_body
    echo '<p class="footer">' >> $after_body
    echo "$blog_license<br>" >> $after_body
    echo "Copyright &copy; 2012-$(date +"%Y") &ndash; $blog_author<br>" >> $after_body
    echo "Powered by Pandoc and Bash." >> $after_body
    echo 'Source code available <a href="https://github.com/brianbuccola/brianbuccola.github.io">here</a>.' >> $after_body
    echo '</p>' >> $after_body
}

create_head() {
    echo "<!-- Warning: Do not edit this file; it will be overwritten during blog rebuild. -->" > $head
    echo '<meta name="description" content="'$blog_description'">' >> $head
    echo '<meta name="keywords" content="'$blog_keywords'">' >> $head
    echo '<link rel="icon" type="image/png" href="favicon.png">' >> $head
    echo '<link href="http://fonts.googleapis.com/css?family=PT+Serif:400,700,400italic" rel="stylesheet" type="text/css">' >> $head
    echo '<link href="http://fonts.googleapis.com/css?family=PT+Sans:400,700,400italic" rel="stylesheet" type="text/css">' >> $head
    echo '<link href="http://fonts.googleapis.com/css?family=PT+Mono:400,700,400italic" rel="stylesheet" type="text/css">' >> $head
    echo '<link href="http://fonts.googleapis.com/css?family=Droid+Sans+Mono" rel="stylesheet" type="text/css">' >> $head

    if [[ -n "$google_analytics" ]]; then
        echo "
<script type=\"text/javascript\">
    var _gaq = _gaq || [];
    _gaq.push(['_setAccount', '"$google_analytics"']);
    _gaq.push(['_trackPageview']);

    (function() {
     var ga = document.createElement('script');
     ga.type = 'text/javascript';
     ga.async = true;
     ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
     var s = document.getElementsByTagName('script')[0];
     s.parentNode.insertBefore(ga, s);
     })();
</script>" >> $head
    fi
}

# Print error message and exit 1.
# Usage: die [MESSAGE] [...]
die() {
    printf "${bold}${red}%s:${reset}" "Error"
    printf " %s\n" "$@"
    exit 1
}

# Edit a post.
# Usage: edit_post [FILENAME]
edit_post() {
    local basename="$(basename "$1" .markdown)"
    if [[ ! -f "${mkd_dir}/${basename}.markdown" && ! -f "${draft_dir}/${basename}.markdown" ]]; then
        die "Cannot find $1 (or illegal file extension)."
    fi

    # If editing a draft, temporarily move it to $mkd_dir.
    if [[ -f "${draft_dir}/${basename}.markdown" ]]; then
        mv "${draft_dir}/${basename}.markdown" "${mkd_dir}/${basename}.markdown"
    fi

    local post_status="E"
    until [[ "$post_status" = "P" || "$post_status" = "p" ]]; do
        # Save as draft
        if [[ "$post_status" = "D" || "$post_status" = "d" ]]; then
            mkdir -p "${draft_dir}"
            # Remove corresponding html file.
            if ! rm "${html_dir}/${basename}.html"; then
                warn "Could not remove \`${html_dir}/${basename}.html'."
            else
                info "Removed \`${html_dir}/${basename}.html'."
            fi
            # Move markdown file to draft_dir.
            if ! mv "${mkd_dir}/${basename}.markdown" "${draft_dir}/${basename}.markdown"; then
                die "Could not move \`${mkd_dir}/${basename}.markdown' to \`${draft_dir}'."
            else
                info "Saved draft as \`${draft_dir}/${basename}.markdown'."
            fi
            rebuild_index
            exit 0
        fi

        # Remove post
        if [[ "$post_status" = "R" || "$post_status" = "r" ]]; then
            remove_post "${mkd_dir}/${basename}.markdown"
            exit 0
        fi

        info "Editing post..."
        ${EDITOR:-vi} "${mkd_dir}/${basename}.markdown"

        mkd2html_post "${mkd_dir}/${basename}.markdown" # md2html_post updates $basename if necessary
        info "Preview this post at: file://${blog_root_dir}/${html_dir}/${basename}.html."
        read -p "[P]ost entry, [e]dit again, save as [d]raft, or [r]emove entry? (p/E/d/r) " post_status
    done

    info "Entry posted."
    rebuild_index
}

# Parse markdown file for title.
# Usage: get_title [FILENAME]
get_title() {
    awk '/<!-- begin metadata/, /end metadata -->/' "$1" | grep "^title" | sed 's/^title:\ *//'
}

# Parse markdown file for date (without time).
# Usage: get_date [FILENAME]
get_date() {
    awk '/<!-- begin metadata/, /end metadata -->/' "$1" | grep "^date" | awk '{ print $2 }'
}

# Print info message.
# Usage: info [MESSAGE] [...]
info() {
    # printf "${bold}%s\n${reset}" "$@"
    printf "%s\n" "$@"
}

# List all posts in a pretty table, including dates.
# Usage: list_posts
list_posts() {
    lines="\n"
    n=1
    for f in $(ls ${mkd_dir}/*.markdown | sort -r); do
        title=$(get_title "$f")
        date=$(get_date "$f")
        date=$(prettify_date "$date")
        line="$n ^ $title ^ $date"
        # Append $line to end of $lines
        lines="${lines}$line\n"
        n=$(( $n + 1 ))
    done
    printf "${lines}" | column -t -s "^"
}

# Convert *all* markdown posts to html
# Usage: mkd2html_all_posts
mkd2html_all_posts() {
    info ":: Reconverting all markdown files in \`${mkd_dir}'..."
    rm "${html_dir}/*.html" &> /dev/null

    # Check for markdown files.
    ls ${mkd_dir}/*.markdown &> /dev/null
    if [[ $? -ne 0 ]]; then
        warn "Could not find any markdown files."
        return
    fi

    for f in $(ls ${mkd_dir}/*.markdown); do
        mkd2html_post "$f"
    done
}

# Convert markdown index (output of `rebuild_index') to html with Pandoc.
# Usage: mkd2html_index [FILENAME]
mkd2html_index() {
    info "Converting $1 to html..."
    if [[ ! -f "$head" ]]; then
        die "Could not find \`$head'. Try running \`$0 setup'."
    fi

    local post_title=$(get_title "$1")
    local date=$(get_date "$1")
    if [[ -z "$post_title" || -z "$date" ]]; then
        die "Missing title or date metadata."
    fi

    # Create temporary html file with index title, to be added during conversion.
    local tmp_before_body="tmp-before-body.html"
    echo "" >> $tmp_before_body
    echo '<h1 class="post_title">'$post_title'</h1>' >> $tmp_before_body
    # echo '<p class="date">'$(prettify_date "$date")'</p>' >> $tmp_before_body
    echo "" >> $tmp_before_body

    pandoc -s -S --mathjax -c "$style" \
        -H "$head" -B "$before_body" -B "$tmp_before_body" -A "$about" -A "$after_body" \
        -V pagetitle="$blog_title" -V author-meta="$blog_author" \
        -f markdown -t html5 -o "$index_file" "$1"

    rm "$tmp_before_body"
}

# Convert markdown post to html with Pandoc.
# Usage: mkd2html_post [FILENAME]
mkd2html_post() {
    info "Converting \`$1' to html..."
    # Strip .markdown extension and get basename
    local basename_old=$(basename "$1" .markdown)
    if [[ ! -f "${mkd_dir}/${basename_old}.markdown" ]]; then
        die "Could not find \`$1' in \`${mkd_dir}'."
    fi

    local post_title=$(get_title "$1")
    local date=$(get_date "$1")
    if [[ -z "$post_title" || -z "$date" ]]; then
        die "Missing title or date metadata."
    fi

    local basename_new=$(convert_string "$date-$post_title")
    if [[ "$basename_old" != "$basename_new" ]] && confirm "Change in title/date detected. Overwrite old filename(s)?"; then
        cp "${mkd_dir}/${basename_old}.markdown" "${mkd_dir}/${basename_new}.markdown"
        info "Updated markdown filename."
        # Check if corresponding .html file exists, and remove it.
        if [[ -f "${html_dir}/${basename_old}.html" ]]; then
            rm "${html_dir}/${basename_old}.html"
            info "Removed old html file \`${html_dir}/${basename_old}.html'."
        fi
        # Keep track so that the old markdown can be removed later.
        local remove_old_mkd_file="true"
        basename="$basename_new"
    elif [[ "$basename_old" != "$basename_new" ]]; then
        basename="$basename_old"
    else
        basename="$basename_new"
    fi

    # Create temporary html file with post title, to be added during conversion.
    local tmp_before_body="tmp-before-body.html"
    echo "" >> $tmp_before_body
    echo '<a class="return_to_index" href="../'$index_file'">'$template_return_to_index'</a>' >> $tmp_before_body
    echo '<h1 class="post_title">'$post_title'</h1>' >> $tmp_before_body
    echo '<p class="date">'$(prettify_date "$date")'</p>' >> $tmp_before_body
    echo "" >> $tmp_before_body

    # Declare some variables to use outside of this function.
    mkd_file="${mkd_dir}/${basename}.markdown"
    html_file="${html_dir}/${basename}.html"

    pandoc -s -S --mathjax -c "../$style" -H "$head" -B "$before_body" -B "$tmp_before_body" -A "$after_body" \
        -V pagetitle="$blog_title - $post_title" -V author-meta="$blog_author" \
        -f markdown -t html5 -o "$html_file" "$mkd_file"

    rm "$tmp_before_body"

    if [[ "$remove_old_mkd_file" = "true" ]]; then
        # Note that "$1" = "${mkd_dir}/${basename_old}.markdown"
        rm "$1"
        info "Removed old markdown file \`${1}'."
    fi
}

# Create new post, automatically adding metadata.
# Usage: new_post
new_post() {
    # local tmp="${mkd_dir}/new-post-${RANDOM}.markdown"
    # while [[ -f "$tmp" ]]; do
    #     local tmp="${mkd_dir}/new-post-${RANDOM}.markdown"
    # done
    read -p "Title: " title
    local tmp="${mkd_dir}/$(date +"%Y-%m-%d")-$(convert_string "$title").markdown"
    if [[ -f "$tmp" ]]; then
        die "The file \`$tmp' already exists."
    fi

    # Add post title and date as comment metadata, to be parsed by get_title
    # and get_date
    echo "<!-- begin metadata" >> $tmp
    echo "title: $title" >> $tmp
    echo "date: $(date +"%Y-%m-%d %H:%M")" >> $tmp
    echo "end metadata -->" >> $tmp

    edit_post "$tmp"
}

# Convert a timestamp into user-specified date format, for display in html files.
# Usage: prettify_date [DATE]
prettify_date() {
    date -d "$1" +"$date_format"
}

# Rebuild the index (main) page, i.e. update list of posts and links.
# Usage: rebuild_index
rebuild_index() {
    info ":: Rebuilding index..."
    index_mkd_file="$(basename "$index_file" .html).markdown"
    # Note: overwrites any previous index_mkd_file.
    echo "<!-- begin metadata" > $index_mkd_file
    echo "title: $blog_index_title" >> $index_mkd_file
    echo "date: $(date +"%Y-%m-%d %H:%M")" >> $index_mkd_file
    echo "end metadata -->" >> $index_mkd_file
    echo "" >> $index_mkd_file

    # Test that there are markdown files.
    ls ${mkd_dir}/*.markdown &> /dev/null
    if [[ $? -ne 0 ]]; then
        warn "Could not find any markdown files. Building empty index."
    fi

    for f in $(ls ${mkd_dir}/*.markdown 2> /dev/null | sort -r); do
        local title=$(get_title "$f")
        local date=$(get_date "$f")
        local date=$(prettify_date "$date")
        echo "- [$title](${html_dir}/$(basename "$f" .markdown).html) -- $date" >> $index_mkd_file
    done

    mkd2html_index "$index_mkd_file"
    rm "$index_mkd_file"
    info "Done rebuilding index. View it at: file://${blog_root_dir}/${index_file}."
}

# Reconvert all markdown posts to html, then rebuild the index.
# Usage: rebuild_all
rebuild_all() {
    setup
    mkd2html_all_posts
    rebuild_index
}

# Safely remove a markdown post by also removing its corresponding html file
# and then rebuilding the index.
# Usage: remove_post [FILENAME]
remove_post() {
    if [[ ! -f "$1" ]]; then
        die "Cannot find \`$1'."
    fi

    local basename="$(basename "$1" .markdown)"
    if confirm "Remove \`${1}'?"; then
        if ! rm "$1"; then
            die "Problem removing \`$1'."
        else
            info "Done."
        fi

        if [[ -f "${html_dir}/${basename}.html" ]]; then
            info "Removing \`${html_dir}/${basename}.html'..."
            if ! rm "${html_dir}/${basename}.html"; then
                "Problem removing \`$1'."
            else
                info "Done."
            fi
        else
            info "No html file to remove."
        fi

        rebuild_index
    else
        info "Aborted."
    fi
}

reset() {
    warn "This will remove ALL markdown and html files."
    if confirm "Continue?"; then
        rm "$head" &>/dev/null
        rm "$before_body" &>/dev/null
        rm "$after_body" &>/dev/null
        rm "$index_file" &>/dev/null
        rm "$mkd_dir" -rf &>/dev/null
        rm "$html_dir" -rf &>/dev/null
        rm "$draft_dir" -rf &>/dev/null
        info "Reset done."
    else
        info "Aborted."
    fi
}

setup() {
    touch "$about"
    create_head
    create_before_body
    create_after_body
    info "Created \`${head}', \`${before_body}', and \`${after_body}'."
}

usage() {
    cat <<EOF
$program_name v$program_version
$program_description
Usage: $0 [COMMAND] [[PARAMETERS]]

Commands:
new                 Create a new post.
list                List all published posts in reverse chronological order.
edit [filename]     Edit a published post or draft.
remove [filename]   Safely remove a published post or draft.
convert [filename]  Convert a single markdown post to html.
setup               Create necessary include files. Run this before doing anything.
rebuild             Rebuild all html files (posts, include files, and \`${index_file}').
reset               Remove all markdown and html files and start from scratch.
EOF
}

# Print warning.
# Usage: warn [MESSAGE] [...]
warn() {
    printf "${bold}${yellow}%s:${reset}" "Warning"
    printf " %s\n" "$@"
}

################################################################################
### Main body of the program

# First check that we're in the blog's root directory.
if [[ $(pwd) != $blog_root_dir ]]; then
    die "$program_name must be run inside \`${blog_root_dir}'."
fi

if [[ $# -eq 0 || $# -gt 2 ]]; then usage && exit; fi

# Make markdown and html directories to reduce risk of errors.
mkdir -p "$mkd_dir"
mkdir -p "$html_dir"

case "$1" in
    new) new_post ;;
    ed|edit) edit_post "$2" ;;
    rm|remove) remove_post "$2" ;;
    convert) mkd2html_post "$2" ;;
    ls|list) list_posts ;;
    rebuild) rebuild_all ;;
    setup) setup ;;
    reset) reset ;;
    *) usage && die "Invalid parameter(s)." ;;
esac

exit 0

# vim: set tw=0 sts=4 sw=4 et:
